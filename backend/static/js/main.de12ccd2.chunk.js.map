{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TimeAgo","addLocale","en","timeAgo","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","readLocalStorage","username","localStorage","getItem","password","auth","setState","refreshList","localAuth","axios","get","state","then","res","setItem","todoList","data","authModal","catch","err","console","log","response","status","renderItems","filter","todo","task","includes","map","item","react_default","a","createElement","key","id","className","bootstrap_switch_button_react_default","onstyle","checked","is_completed","onlabel","offlabel","onChange","handleDone","concat","renderTask","format","Date","created_at","type","onClick","toggle","renderTags","tags","forEach","_tags","taskTags","match","push","apply","toConsumableArray","Set","tag","index","split","token","handleSubmit","post","put","handleDelete","modal","delete","handleChange","e","_e$target","target","name","value","objectSpread","defineProperty","handleAuth","signupOrLogin","createItem","event","newTaskInput","logout","clear","window","location","reload","selectedItem","_this2","autoComplete","onKeyDown","placeholder","length","renderDeleteModal","renderLoginModal","_this3","reactstrap_es","isOpen","color","_this4","for","Component","Boolean","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.de12ccd2.chunk.js","sourcesContent":["// frontend/src/App.js\n\nimport React, {Component} from \"react\";\nimport axios from \"axios\";\nimport BootstrapSwitchButton from 'bootstrap-switch-button-react'\nimport TimeAgo from 'javascript-time-ago'\n// Load locale-specific relative date/time formatting rules.\nimport en from 'javascript-time-ago/locale/en'\nimport {Button, Form, FormGroup, Input, Label, Modal, ModalBody, ModalFooter, ModalHeader} from \"reactstrap\";\n\n// Add locale-specific relative date/time formatting rules.\nTimeAgo.addLocale(en);\nconst timeAgo = new TimeAgo('en-US');\n\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            newTaskInput: '',\n            filter: 'all',\n            selectedItem: {},\n            modal: false,\n            authModal: true,\n            todoList: [],\n            auth: {},\n            signupOrLogin: 'login',\n        };\n    }\n\n    componentDidMount() {\n        this.refreshList();\n    }\n\n    readLocalStorage = () => {\n        const username = localStorage.getItem('username');\n        const password = localStorage.getItem('password');\n        let auth = (username && password) ? {username, password} : false;\n        if (auth) {\n            this.setState({auth})\n        }\n        return auth\n    };\n\n    refreshList = () => {\n        const localAuth = this.readLocalStorage();\n        axios\n            .get(\"http://localhost:8000/api/tasks/\", {auth: localAuth ? localAuth : this.state.auth})\n            .then(res => {\n                localStorage.setItem('username', this.state.auth.username);\n                localStorage.setItem('password', this.state.auth.password);\n                this.setState({todoList: res.data, authModal: false})\n            })\n            .catch(err => {\n                console.log(err.response.status);\n                if (err.response.status === 401) {\n                    this.setState({authModal: true})\n                }\n            });\n    };\n    renderItems = () => {\n        let {todoList} = this.state;\n        if (this.state.filter !== 'all')\n            todoList = todoList.filter((todo) => {\n                return todo.task.includes(this.state.filter)\n            });\n        return todoList.map(item => (\n\n            <li key={item.id} className=\"list-group-item d-flex justify-content-between align-items-center\">\n                <div className=\"d-flex w-100 justify-content-between\">\n                    <div className=\"text-center switch-button-todo\">\n                        <BootstrapSwitchButton\n                            onstyle=\"success\"\n                            checked={item.is_completed}\n                            onlabel='✓'\n                            offlabel='✓'\n                            onChange={() => this.handleDone(item)}\n                        />\n                    </div>\n                    <div className={`pl-3 pr-3 ${item.is_completed ? 'line-through' : ''}`}>\n                        {this.renderTask(item.task)}\n                    </div>\n                    <div className=\"text-center time-ago\">\n                        <small>{timeAgo.format(new Date(item.created_at))}</small><br/>\n                        <button type=\"button\" className=\"btn btn-sm btn-link btn-delete\"\n                                onClick={() => this.toggle(item)}><small>Delete</small></button>\n                    </div>\n\n                </div>\n            </li>\n        ));\n    };\n    renderTags = () => {\n        const {todoList} = this.state;\n        let tags = [];\n        todoList.forEach(item => {\n            const taskTags = item.task.match(/#\\w[^!\\W]+/g);\n            console.log(taskTags);\n            if (taskTags)\n                tags.push(...taskTags);\n        });\n        tags = new Set(tags);\n        tags = [...tags];\n        return tags.map((tag, index) => (\n            <button key={index}\n                    className={`ml-1 btn btn-sm btn-outline-primary ${this.state.filter === tag ? 'active' : ''}`}\n                    onClick={() => this.setState({filter: tag})}>{tag}\n            </button>\n        ));\n    };\n    renderTask = (task) => {\n        // const taskTags = task.match(/(?<hashtag>#\\w[^!\\W]+)|(?<nonhashtag>\\w[^!\\W]+)/g);\n        const taskTags = task.split(' ');\n\n        return taskTags.map((token, index) => (\n            token.includes('#') ?\n                <a className='mr-1 text-primary cursor-pointer'\n                   key={index}\n                   onClick={() => this.setState({filter: token})}>\n                    {token}\n                </a> : token + \" \"\n        ));\n    };\n\n    handleSubmit = item => {\n        const localAuth = this.readLocalStorage();\n        axios\n            .post(\"http://localhost:8000/api/tasks/\", item, {auth: localAuth ? localAuth : this.state.auth})\n            .then(res => this.refreshList())\n            .catch(err => {\n                console.log(err.response.status);\n                if (err.response.status === 401) {\n                    this.setState({authModal: true})\n                }\n            });\n    };\n    handleDone = item => {\n        const localAuth = this.readLocalStorage();\n\n        item.is_completed = !item.is_completed;\n        axios\n            .put(`http://localhost:8000/api/tasks/${item.id}/`, item, {auth: localAuth ? localAuth : this.state.auth})\n            .then(res => this.refreshList())\n            .catch(err => {\n                console.log(err.response.status);\n                if (err.response.status === 401) {\n                    this.setState({authModal: true})\n                }\n            });\n    };\n    handleDelete = item => {\n        const localAuth = this.readLocalStorage();\n\n        this.setState({modal: false});\n        axios\n            .delete(`http://localhost:8000/api/tasks/${item.id}`, {auth: localAuth ? localAuth : this.state.auth})\n            .then(res => this.refreshList())\n            .catch(err => {\n                console.log(err.response.status);\n                if (err.response.status === 401) {\n                    this.setState({authModal: true})\n                }\n            });\n    };\n\n    handleChange = e => {\n        let {name, value} = e.target;\n\n        const auth = {...this.state.auth, [name]: value};\n        this.setState({auth});\n    };\n\n    handleAuth = () => {\n        const auth = this.state.auth;\n        if (this.state.signupOrLogin === 'login') {\n            this.refreshList()\n        } else {\n            axios.post(\"http://localhost:8000/api/users/\", auth)\n                .then(res => {\n                    if (res.status === 201) {\n                        this.setState({auth: auth});\n                        this.refreshList()\n                    }\n                })\n        }\n    };\n\n    createItem = (event) => {\n        if (event.key === 'Enter') {\n            const item = {task: this.state.newTaskInput};\n            this.handleSubmit(item);\n            this.refreshList();\n            this.setState({newTaskInput: ''});\n        }\n    };\n\n    logout = () => {\n        localStorage.clear();\n        window.location.reload(false);\n    };\n\n    render() {\n        return (\n            <div className=\"container-fluid text-dark\">\n                {!this.state.authModal &&\n                <main>\n                    <div className=\"row bg-light pl-5 pr-5 pt-1 pb-1 mb-3\">\n                        <div className=\"col-8 offset-2\">\n                            <div className=\"form-group mt-3\">\n                                <input autoComplete=\"off\" name=\"task\" type=\"text\" className=\"form-control\"\n                                       value={this.state.newTaskInput}\n                                       onChange={(e) => {\n                                           this.setState({newTaskInput: e.target.value})\n                                       }}\n                                       onKeyDown={this.createItem}\n                                       placeholder=\"Task to be done.. You can use #tag to tag your task.\"/>\n                                <small className=\"form-text text-muted text-center\"><b>🛎️ Tip:</b> Please\n                                    press <kbd>↵</kbd> key to automaticly create a task. You can use #tag to tag your\n                                    task.</small>\n                                <p className='text-center mt-2'>Logged as {this.state.auth.username}\n                                    <span className='text-primary cursor-pointer'\n                                          onClick={this.logout}> logout</span>.</p>\n                                <div className=\"invalid-feedback\"></div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"row\">\n                        <div className=\"col-6 offset-3\">\n                            {this.state.todoList.length > 0 ?\n                                <button\n                                    className={`btn btn-outline-primary ${this.state.filter === 'all' ? 'active' : ''}`}\n                                    onClick={() => this.setState({filter: 'all'})}>All\n                                </button>\n                                : 'Please add some todos.'}\n                            {this.renderTags()}\n\n                        </div>\n                    </div>\n\n                    <div className=\"row\">\n                        <div className=\"col-6 offset-3\">\n                            <ul className=\"list-group list-group-flush\">\n                                {this.renderItems()}\n                            </ul>\n                        </div>\n                    </div>\n                </main>\n                }\n                {this.renderDeleteModal()}\n                {this.renderLoginModal()}\n            </div>\n        );\n    }\n\n    renderDeleteModal() {\n        return (\n            <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                <ModalHeader toggle={this.toggle}> Todo Item </ModalHeader>\n                <ModalBody>\n                    {this.state.selectedItem.task}\n                </ModalBody>\n                <ModalFooter>\n                    <Button color=\"danger\" onClick={() => this.handleDelete(this.state.selectedItem)}>\n                        Remove\n                    </Button>\n                </ModalFooter>\n            </Modal>\n        );\n    }\n\n    renderLoginModal() {\n        return (\n            <Modal isOpen={this.state.authModal}>\n                <ModalBody>\n                    <h1 className={`d-inline cursor-pointer ${this.state.signupOrLogin === 'login' ? 'text-primary' : 'text-secondary'} `}\n                        onClick={() => this.setState({signupOrLogin: 'login'})}>Login</h1>\n                    <h1 className={`d-inline cursor-pointer ml-2 ${this.state.signupOrLogin === 'signup' ? 'text-primary' : 'text-secondary'} `}\n                        onClick={() => this.setState({signupOrLogin: 'signup'})}>Sign\n                        up</h1>\n                    <Form>\n                        <FormGroup>\n                            <Label for=\"username\">Username</Label>\n                            <Input type=\"username\" name=\"username\" id=\"username\"\n                                   onChange={this.handleChange}/>\n                        </FormGroup>\n                        <FormGroup>\n                            <Label for=\"password\">Password</Label>\n                            <Input type=\"password\" name=\"password\" id=\"password\"\n                                   onChange={this.handleChange}/>\n                        </FormGroup>\n                        <Button onClick={this.handleAuth}>Submit</Button>\n                    </Form>\n                </ModalBody>\n            </Modal>\n        );\n    }\n\n    toggle = (item) => {\n        this.setState({selectedItem: item, modal: !this.state.modal});\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\n  // frontend/src/index.js\n  \n  import React from 'react';\n  import ReactDOM from 'react-dom';\n  import 'bootstrap/dist/css/bootstrap.min.css';       // add this\n  import './index.css';\n  import App from './App';\n  import * as serviceWorker from './serviceWorker';\n  \n  ReactDOM.render(<App />, document.getElementById('root'));\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: http://bit.ly/CRA-PWA\n  serviceWorker.unregister();"],"sourceRoot":""}